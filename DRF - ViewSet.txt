
APIViews    allready available then why we should go for ViewSets .....?
=========  ===============     ============           =========

Is there any positive things in ViewSets ..?

Yes, using ViewSets we can develop applications very fastly than APIViews.

Basic CRUD operations if you want to implement then immediatly your hand should go for Viewsets development.

ViewSets are very easy to develop the views.py file logics.

Here we are going to develop only one class for CURD operations.

We are not configure the URLs automatically.. DefaultRouter class is going to take care of creating the URLs patterns insted of programers.

Regular URLs are not allowed in the ViewSets concepts.
Regular URLs are applicable only APIViews .

Most of the business logics are done by internally automatically.


 routers   concept :
======   ======
Step 1 ) We import the "routers" module form rest_framework ,  
Step 2 ) we create the router object for "DefaultRouter" class.
Step 3 ) Finally we register or add the router urls with 'some name'  along with "ViewsNames".




Now we are going to develop the One Application then we will understand easily.

Program Steps:
=============

Step1 :-  Create Project Name as     
                cmd >  django-admin startproject  ViewSet_Project

Step2 :- Create Application name as          
               cmd > python manage.py startapp ViewSet_App

Step3 :- Create database name as 
                 cmd > create database viewssets_db

Step4 :- Open the settings.py file , Add the  ViewSet_App  and rest_framework apps in INSTALLED_APS array                              section.
               Configure the database details in settings.py file .

Step5 :- open models.py file and write the following the code 
               
                class Employee(models.Model):
	       eno = models.IntegerFiled()
	       ename = models.CharFiled(max_length=100)
	       esal
	       eaddr 

Step6 :- Open admin.py file write following code.

Step7 :- cmd > python manage.py makemigrations

Step8 :- cmd > python manage.py migrate
                                         required tables and default tables will be created.

Step8 :- Let me create supr user now.    cmd > python manage.py createsuperuser

Step9 :-  cmd > python manage.py runserver 8877

Step10 :- open broweser and login into admin site
step11 :- Add the some employee records into employee table.

Note : -  If any application is model-backed then compulsary we have to write Serializer class for that Model.

step12 : - create serializers.py file under application and write code.
                 
                class EmployeeSerializer(serializers.ModelSerializer):
                             class Meta :
		model = Employee 
 		fields = '__all__'





Q) What is difference between ModelSerializer  & Serializer classes ?
       ====================       ============           ========

ModelSerializer  :
============= 
     we are not specifying fields manuvally with  data types and class names in ModelSerializer.
      second one is create() and update() such methods default implementation is also there in ModelSerializer.
      Thats why ModelSerializer got more popularity . It is adding more shortcuts instead of writing more lines of                code .
   ex :   class EmployeeSerializer(serializers.ModelSerializer):
                             class Meta :
		model = Employee 
		fields = ['eno' , 'ename']
 		#fields = '__all__'

Serializer :
=======
                class EmployeeSerializer(serializers.Serializer):       
	       eno = serializers.IntegerFiled()
	       ename = serializers.CharFiled()


Are you feel any deficulty to understand this one ?
======== ==============  
We are not require to specify all the fields manuvally. because we are using ModelSerializer , so the fields will be considered automatically based on Model name.

Step 13 :- Let me go for views.py file and write the code

                  class EmployeeCURDCBV(ModelViewSet):
	         queryset = Employee.objects.all()
	          serializer_class  = EmployeeSerializer

                              #100 lines of code reducing here

Step14 :- open urls.py file and write code 
	
	from django.contrib import admin
	from django.conf.urls import url
	from ViewSet_App  import views

                    from rest_framework.routers import DefaultRouter
	router = DefaultRouter()
	router.register('api' , views.EmployeeCURDCBV , base_name='api')
	
	urlpatterns = [
                              url(r'^admin/', admin.site.urls),
	          url(r'^' ' ,  include(router.urls))
                    ]
 






